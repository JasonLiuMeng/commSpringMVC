<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:mvc="http://www.springframework.org/schema/mvc"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xsi:schemaLocation="http://www.springframework.org/schema/beans  
                        http://www.springframework.org/schema/beans/spring-beans-4.0.xsd  
                        http://www.springframework.org/schema/context  
                        http://www.springframework.org/schema/context/spring-context-4.0.xsd  
                        http://www.springframework.org/schema/mvc  
                        http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
                        http://www.springframework.org/schema/aop 
                        http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
                        http://www.springframework.org/schema/tx 
                        http://www.springframework.org/schema/tx/spring-tx.xsd">
                        
     <!-- 自动扫描 -->
    <context:component-scan base-package="com.ssm">
    	<context:exclude-filter type="regex" expression="com.ssm.aop.controller.*"/>
    	<context:exclude-filter type="regex" expression="com.ssm.controller.*"/>
    </context:component-scan>
                      
    <!-- 引入配置文件 -->
    <bean id="propertyConfigurer"
        class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="location" value="classpath:jdbc.properties" />
    </bean>
    
    <!--  配置c3p0数据库连接池 -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
		destroy-method="close">
		<property name="driverClass" value="${jdbc.driverClassName}" />
		<property name="jdbcUrl" value="${jdbc.url}" />
		<property name="user" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<property name="minPoolSize" value="${jdbc.minPoolSize}" />
		<!--最小连接数-->
		
		<property name="maxPoolSize" value="${jdbc.maxPoolSize}" />
		<!--最大连接数-->
		
		<property name="initialPoolSize" value="${jdbc.initialPoolSize}" />
		<!--连接池初始化时获取的连接数，介于minPoolSize和maxPoolSize之间-->
		
		<property name="maxIdleTime" value="${jdbc.maxIdleTime}" />
		<!--最大空闲的时间，单位是秒，无用的连接空闲超时后会被回收，直到达到最小连接数-->
		
		<property name="acquireIncrement" value="${jdbc.acquireIncrement}" />
		<!--当前连接耗尽并且在尚未达到最大连接数限制的前提下，一次获取的新连接数量-->
		
		<property name="idleConnectionTestPeriod" value="${jdbc.idleConnectionTestPeriod}" />
		<!--进行连接空闲超时检查的时间间隔-->
		
		<property name="acquireRetryAttempts"
			value="${jdbc.acquireRetryAttempts}" />
		<!--定义在从数据库获取新连接失败后重试的次数，缺省值30次-->
		
		<property name="breakAfterAcquireFailure"
			value="${jdbc.breakAfterAcquireFailure}" />
		<!--
			获取连接失败将会引起所有等待连接池来获取连接的线程抛出异常。但
			是数据源仍保持有效，并在下次调用getConnection()的时候继续重新尝试获取连接。如果设为true，那么在尝试获取连接失败后该数据源
			将申明已断开并永久关闭。Default:false
		-->
	</bean>
	
	<!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <!-- 自动扫描mapping.xml文件 -->
        <property name="mapperLocations" value="classpath:com/ssm/mapping/*.xml"></property>
    </bean>
	
	<!-- DAO接口所在包名，Spring会自动查找其下的类  注入sqlSessionFactory -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.ssm.dao" />
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
    </bean>
	
	<!-- (事务管理)采用spring提供的jdbc事务管理器来管理事务 -->
    <bean id="transactionManager"
        class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>
	
	<!-- 
		声明事务切点  execution( * com.ssm.service..*.*(..))
		 1、execution(): 表达式主体。
		 2、第一个*号：表示返回类型，*号表示所有的类型。
		 3、包名：表示需要拦截的包名，后面的两个句点(..)表示当前包和当前包的所有子包，com.ssm.service包、子孙包下所有类的方法。
		 4、第二个*号：表示类名，*号表示所有的类。
		 5、*(..):最后这个星号表示方法名，*号表示所有的方法，后面括弧里面表示方法的参数，两个句点(..)表示任何参数
	-->
	<aop:config proxy-target-class="true">
		<aop:advisor advice-ref="txAdvice"
			pointcut="execution( * com.ssm.service..*.*(..))" />
	</aop:config>

	<!-- 
		通用事务通知
		PROPAGATION_REQUIRED：         支持当前事务，如果当前没有事务，就新建一个事务。这是最常见的选择。 
		PROPAGATION_SUPPORTS：         支持当前事务，如果当前没有事务，就以非事务方式执行。 
		PROPAGATION_MANDATORY：      支持当前事务，如果当前没有事务，就抛出异常。 
		PROPAGATION_REQUIRES_NEW：   新建事务，如果当前存在事务，把当前事务挂起。
		PROPAGATION_NOT_SUPPORTED：以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。 
		PROPAGATION_NEVER：               以非事务方式执行，如果当前存在事务，则抛出异常。 
		PROPAGATION_NESTED：              支持当前事务，如果当前事务存在，则执行一个嵌套事务，如果当前没有事务，就新建一个事务。
	 -->

	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="get*" read-only="true" />
			<tx:method name="do*" propagation="REQUIRED" rollback-for="Exception" />
		</tx:attributes>
	</tx:advice>
</beans>